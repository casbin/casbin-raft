// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/casbin/casbin/v2/persist (interfaces: Adapter)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/casbin/casbin/v2/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAdapter is a mock of Adapter interface
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// AddPolicy mocks base method
func (m *MockAdapter) AddPolicy(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPolicy indicates an expected call of AddPolicy
func (mr *MockAdapterMockRecorder) AddPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicy", reflect.TypeOf((*MockAdapter)(nil).AddPolicy), arg0, arg1, arg2)
}

// LoadPolicy mocks base method
func (m *MockAdapter) LoadPolicy(arg0 model.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPolicy indicates an expected call of LoadPolicy
func (mr *MockAdapterMockRecorder) LoadPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPolicy", reflect.TypeOf((*MockAdapter)(nil).LoadPolicy), arg0)
}

// RemoveFilteredPolicy mocks base method
func (m *MockAdapter) RemoveFilteredPolicy(arg0, arg1 string, arg2 int, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilteredPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFilteredPolicy indicates an expected call of RemoveFilteredPolicy
func (mr *MockAdapterMockRecorder) RemoveFilteredPolicy(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredPolicy", reflect.TypeOf((*MockAdapter)(nil).RemoveFilteredPolicy), varargs...)
}

// RemovePolicy mocks base method
func (m *MockAdapter) RemovePolicy(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePolicy indicates an expected call of RemovePolicy
func (mr *MockAdapterMockRecorder) RemovePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicy", reflect.TypeOf((*MockAdapter)(nil).RemovePolicy), arg0, arg1, arg2)
}

// SavePolicy mocks base method
func (m *MockAdapter) SavePolicy(arg0 model.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePolicy indicates an expected call of SavePolicy
func (mr *MockAdapterMockRecorder) SavePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePolicy", reflect.TypeOf((*MockAdapter)(nil).SavePolicy), arg0)
}
